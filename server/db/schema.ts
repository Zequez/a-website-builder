/* tslint:disable */
/* eslint-disable */


/**
 * AUTO-GENERATED FILE - DO NOT EDIT!
 *
 * This file was automatically generated by pg-to-ts v.4.1.1
 * $ pg-to-ts generate -c postgres://localhost:5432/hoja -t blobs -t files -t members -t migrations -t prerendered -t sites -t tsites -s public
 *
 */


export type Json = unknown;

// Table blobs
export type Blobs = {
  id: string;
  name: string;
  member_id: number;
  url: string;
  content_type: string;
  size: number;
  created_at: Date | null;
}
export type BlobsInput = {
  id?: string;
  name: string;
  member_id: number;
  url: string;
  content_type: string;
  size: number;
  created_at?: Date | null;
}
const blobs = {
  tableName: 'blobs',
  columns: ['id', 'name', 'member_id', 'url', 'content_type', 'size', 'created_at'],
  requiredForInsert: ['name', 'member_id', 'url', 'content_type', 'size'],
  primaryKey: 'id',
  foreignKeys: { member_id: { table: 'members', column: 'id', $type: null as unknown as Members }, },
  $type: null as unknown as Blobs,
  $input: null as unknown as BlobsInput
} as const;

// Table files
export type Files = {
  id: string;
  name: string;
  data: string | null;
  data_size: number | null;
  data_cdn_url: string | null;
  created_at: Date | null;
  site_id: string;
  updated_at: Date | null;
  is_dist: boolean | null;
  member_id: number | null;
}
export type FilesInput = {
  id?: string;
  name: string;
  data?: string | null;
  data_size?: number | null;
  data_cdn_url?: string | null;
  created_at?: Date | null;
  site_id: string;
  updated_at?: Date | null;
  is_dist?: boolean | null;
  member_id?: number | null;
}
const files = {
  tableName: 'files',
  columns: ['id', 'name', 'data', 'data_size', 'data_cdn_url', 'created_at', 'site_id', 'updated_at', 'is_dist', 'member_id'],
  requiredForInsert: ['name', 'site_id'],
  primaryKey: 'id',
  foreignKeys: {
    site_id: { table: 'sites', column: 'id', $type: null as unknown as Sites },
    member_id: { table: 'members', column: 'id', $type: null as unknown as Members },
  },
  $type: null as unknown as Files,
  $input: null as unknown as FilesInput
} as const;

// Table members
export type Members = {
  id: number;
  email: string;
  full_name: string | null;
  is_admin: boolean | null;
  active: boolean | null;
  passphrase: string | null;
  created_at: Date | null;
  subscribed_to_newsletter: boolean | null;
  tag: string | null;
  telegram_handle: string | null;
  google_tokens: Json | null;
}
export type MembersInput = {
  id?: number;
  email: string;
  full_name?: string | null;
  is_admin?: boolean | null;
  active?: boolean | null;
  passphrase?: string | null;
  created_at?: Date | null;
  subscribed_to_newsletter?: boolean | null;
  tag?: string | null;
  telegram_handle?: string | null;
  google_tokens?: Json | null;
}
const members = {
  tableName: 'members',
  columns: ['id', 'email', 'full_name', 'is_admin', 'active', 'passphrase', 'created_at', 'subscribed_to_newsletter', 'tag', 'telegram_handle', 'google_tokens'],
  requiredForInsert: ['email'],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as Members,
  $input: null as unknown as MembersInput
} as const;

// Table migrations
export type Migrations = {
  id: number;
  name: string;
  created_at: Date | null;
}
export type MigrationsInput = {
  id?: number;
  name: string;
  created_at?: Date | null;
}
const migrations = {
  tableName: 'migrations',
  columns: ['id', 'name', 'created_at'],
  requiredForInsert: ['name'],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as Migrations,
  $input: null as unknown as MigrationsInput
} as const;

// Table prerendered
export type Prerendered = {
  id: string;
  tsite_id: string;
  path: string;
  content: string;
  created_at: Date | null;
}
export type PrerenderedInput = {
  id?: string;
  tsite_id: string;
  path: string;
  content: string;
  created_at?: Date | null;
}
const prerendered = {
  tableName: 'prerendered',
  columns: ['id', 'tsite_id', 'path', 'content', 'created_at'],
  requiredForInsert: ['tsite_id', 'path', 'content'],
  primaryKey: 'id',
  foreignKeys: { tsite_id: { table: 'tsites', column: 'id', $type: null as unknown as Tsites }, },
  $type: null as unknown as Prerendered,
  $input: null as unknown as PrerenderedInput
} as const;

// Table sites
export type Sites = {
  name: string;
  local_name: string;
  domain_name: string | null;
  member_id: number;
  created_at: Date | null;
  id: string;
  updated_at: Date | null;
}
export type SitesInput = {
  name: string;
  local_name: string;
  domain_name?: string | null;
  member_id: number;
  created_at?: Date | null;
  id?: string;
  updated_at?: Date | null;
}
const sites = {
  tableName: 'sites',
  columns: ['name', 'local_name', 'domain_name', 'member_id', 'created_at', 'id', 'updated_at'],
  requiredForInsert: ['name', 'local_name', 'member_id'],
  primaryKey: 'id',
  foreignKeys: { member_id: { table: 'members', column: 'id', $type: null as unknown as Members }, },
  $type: null as unknown as Sites,
  $input: null as unknown as SitesInput
} as const;

// Table tsites
export type Tsites = {
  id: string;
  config: Json;
  template: string;
  name: string;
  subdomain: string;
  domain: string;
  access_key: string;
  created_at: Date | null;
  updated_at: Date | null;
  deploy_config: Json | null;
}
export type TsitesInput = {
  id?: string;
  config: Json;
  template: string;
  name: string;
  subdomain: string;
  domain: string;
  access_key: string;
  created_at?: Date | null;
  updated_at?: Date | null;
  deploy_config?: Json | null;
}
const tsites = {
  tableName: 'tsites',
  columns: ['id', 'config', 'template', 'name', 'subdomain', 'domain', 'access_key', 'created_at', 'updated_at', 'deploy_config'],
  requiredForInsert: ['config', 'template', 'name', 'subdomain', 'domain', 'access_key'],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as Tsites,
  $input: null as unknown as TsitesInput
} as const;


export type TableTypes = {
  blobs: {
    select: Blobs;
    input: BlobsInput;
  };
  files: {
    select: Files;
    input: FilesInput;
  };
  members: {
    select: Members;
    input: MembersInput;
  };
  migrations: {
    select: Migrations;
    input: MigrationsInput;
  };
  prerendered: {
    select: Prerendered;
    input: PrerenderedInput;
  };
  sites: {
    select: Sites;
    input: SitesInput;
  };
  tsites: {
    select: Tsites;
    input: TsitesInput;
  };
}

export const tables = {
  blobs,
  files,
  members,
  migrations,
  prerendered,
  sites,
  tsites,
}
