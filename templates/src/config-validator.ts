import Ajv from 'ajv';
// The schemas cannot use vite-yaml loading because this file is loaded from both client and server
// The schemas refs need to be changed in order to reference an ID instead of a local file
// ./schemas/index.ts is generated by codegen using scheams/*.yml
import * as schemas from './schemas';

export default function createValidator() {
  const ajv = new Ajv({ schemas: [Object.values(schemas)] });
  return ajv.compile(schemas.Config);
}

export type ValidationError = { path: string; message: string; params: any };

export function valErr(msg: string, path?: string, params?: any): ValidationError {
  return { message: msg, path: path || '*', params: params || {} };
}

function ajvToValidationError(e: any): ValidationError {
  return {
    path: e.instancePath || '',
    message: e.message || '',
    params: e.params || '',
  };
}

export function parseAndValidateConfig(config: string): [Config | null, ValidationError[]] {
  let parsedConfig: any;
  try {
    parsedConfig = JSON.parse(config);
    return [parsedConfig, validateConfig(parsedConfig)];
  } catch (e) {
    return [null, [valErr((e as any).message)]];
  }
}

export function validateConfig(config: any): ValidationError[] {
  const validator = createValidator();
  if (validator(config)) {
    return [];
  } else {
    console.log('Errors:', validator.errors);
    return validator.errors!.map(ajvToValidationError);
  }
}
